""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Author:
"       Jean-Marie Comets
"
" Version:
"       1.8 - 29/10/2012 (22:49)
"
" Sections:
"   - General
"   - Vim user interface
"   - Status line
"   - Text, tab and indent related
"   - Plugin settings
"   - Colors and Fonts
"   - Moving around, tabs and buffers
"   - Searching
"   - Various key remaps
"   - Helper functions
"   - Filetype settings
"   - Plugin customization
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history Vim has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

" Remove Vim's startup message (sorry...)
set shortmess+=I

" Set mapleader (shortcut key) to ","
let mapleader = ","
let g:mapleader = ","

" Turn backup off, since most stuff is in svn / git anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 5 lines to the cursor - when moving vertically using j / k
set scrolloff=5

" Turn on the WiLd menu
set wildmenu

" Behave shell-like when completing shell
set wildmode=longest,list

" Ignore compiled files and backups
set wildignore=*.o,*~,*.pyc,*.gch

" Compatible options
set cpoptions+=$

" Show line numbers
set number

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" Fold settings
set foldmethod=indent

" Default completing function
set omnifunc=syntaxcomplete#Complete

" Tags
set tags=./tags;/

" Max number of fold levels
set foldnestmax=10

" Folding everything
set nofoldenable

" Again, folding parent levels
set foldlevel=1

" How many tenths of a second to blink when matching brackets
set matchtime=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Show tabs / spaces
"set list listchars=tab:>-,trail:~,extends:>,precedes:<
set nolist

" Hide the mouse pointer while typing
set mousehide

" Deactivate mouse entirely
set mouse=

" Always put a status line in, even if there is only one window
set laststatus=2

" Status line stolen from Derek Wyatt's configuration:
"  - found here : "https://github.com/derekwyatt/vim-config/blob/master/vimrc"
set statusline=%f\ %m\ %r%{fugitive#statusline()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Linebreak on 100 characters
"set linebreak
"set textwidth=100

" Virtual edit (awesome)
"set virtualedit=all

" Explicit FTW
set autoindent
set smartindent
set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable filetype plugins
filetype plugin indent on

" Start Pathogen plugin to load bundle
call pathogen#infect()
call pathogen#helptags()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Dark backgrounds are better
set background=light

" Colorschemes:
"  1 - jellybeans
"  2 - obsidian
"  3 - mustang
"  4 - wombat
"  5 - tesla
"  6 - adrian
"  7 - ir_black
" colorscheme obsidian
colorscheme kib_darktango

" Editing font
set guifont=Monospace\ 11

" Set extra options when running in GUI mode
if has("gui_running")
    set go-=r
    set go-=R
    set go-=l
    set go-=L
    set go-=m
    set go-=T
    set go+=e
    "set t_Co=256
    set gtl=%M\ %t
endif

" Configure for terminal
if &term =~ "xterm"
    if has("terminfo")
        let g:CommandTCancelMap=['<ESC>','<C-c>']
        set t_Co=256
        set t_Sf=<Esc>[3%p1%dm
        set t_Sb=<Esc>[4%p1%dm
    else
        set t_Co=8
        set t_Sf=<Esc>[3%dm
        set t_Sb=<Esc>[4%dm
    endif
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8
" setglobal fileencoding=utf-8
" set bomb
" set termencoding=iso-8859-15
" set fileencodings=ucs-bom,iso-8859-15,iso-8859-3,utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
 

" Toggle between absolute / relative line numbering
map <leader>n :call ToggleRelNumbering()<cr>
vmap <leader>n <Esc><leader>ngv

try
    " Specify the behavior when switching between buffers
    set switchbuf=useopen,usetab,newtab

    " Tab display
    set showtabline=0
catch
endtry

if has("autocmd")

    " Return to last edit position when opening files
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
endif

" Useful mappings for managing tabs
nmap <leader>tn :tabnew<cr>
nmap <leader>to :tabonly<cr>
nmap <leader>tc :tabclose<cr>
nmap <C-tab> :tabnext<cr>
nmap <C-S-tab> :tabprevious<cr>

" Switch CWD to the directory of the open buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Close buffer without closing window
nmap <silent> <leader>bd :Bclose!<cr>

" Close all buffers
nmap <silent> <leader>ba :1,1000bd!<cr>

" Move a line of text using ALT+[jk]
nnoremap <M-j> :m .+1<cr>==
nnoremap <M-k> :m .-2<cr>==
inoremap <M-j> <Esc>:m .+1<cr>==gi
inoremap <M-k> <Esc>:m .-2<cr>==gi
vnoremap <M-j> :m '>+1<cr>gv=gv
vnoremap <M-k> :m '<-2<cr>gv=gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Searching
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore case
set ignorecase

" Try to be smart about cases
set smartcase

" Highlight results
set hlsearch

" Makes search act like in modern browsers
set incsearch

" Center screen at cursor
nnoremap n nzz
nnoremap } }zz

" Highlight the current line and the current cursor during the insert mode
if (has("autocmd"))
    autocmd insertLeave * set nocursorcolumn
    autocmd insertEnter * set cursorcolumn
endif
set cursorline

" Replace indentation, eol and other non visible char
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set list

" Disable highlight when <leader><cr> is pressed
nmap <silent> <leader><cr> :nohls<cr>

" Find current word in new window
nmap <leader>sw :let @/=expand("<cword>")<bar>split<bar>normal n<cr>
nmap <leader>sW :let @/='\<'.expand("<cword>").'\>'<bar>split<bar>normal n<cr>

" Quick search-replace
nnoremap <leader>s :%s/\<<C-r><C-w>\>//g<left><left>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Various key remaps
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap Vim 0 to first non-blank character
nmap 0 ^

" Exchange "`" and "'"
nnoremap ' `
nnoremap ` '

" Map ";" to ":" (avoid typos)
noremap ; :

" Map "²" to "~" (quicker), and don't go forward one character
"nmap ² ~h

" Resolve inconsistency between "Y" (line),
"   and "D" (til end of line)
"nmap D dd
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Disable arrow keys (forever...)
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Fast saving
nnoremap <leader>w :w!<cr>

" Close current file
nmap <leader>q :q<cr>

" Run "ls" in cwd Shell
nmap <leader>ls :!ls<cr>

" Edit / Source configuration
nmap <leader>co :e $MYVIMRC<cr>
nmap <leader>so :so $MYVIMRC<cr>

" Toggle paste mode on and off
nmap <leader>pp :setlocal paste!<cr>

" Toggle spell-checking
nmap <leader>ss :setlocal spell!<cr>

" Quick make command
map <leader>m :make<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
    finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
    let bclose_multiple = 1
endif "}}}

" Display an error message.
function! s:Warn(msg) "{{{
    echohl ErrorMsg
    echomsg a:msg
    echohl NONE
endfunction "}}}

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer) "{{{
    if empty(a:buffer)
        let btarget = bufnr('%')
    elseif a:buffer =~ '^\d\+$'
        let btarget = bufnr(str2nr(a:buffer))
    else
        let btarget = bufnr(a:buffer)
    endif
    if btarget < 0
        call s:Warn('No matching buffer for '.a:buffer)
        return
    endif
    if empty(a:bang) && getbufvar(btarget, '&modified')
        call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
        return
    endif
    " Numbers of windows that view target buffer which we will delete.
    let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
    if !g:bclose_multiple && len(wnums) > 1
        call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
        return
    endif
    let wcurrent = winnr()
    for w in wnums
        execute w.'wincmd w'
        let prevbuf = bufnr('#')
        if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
            buffer #
        else
            bprevious
        endif
        if btarget == bufnr('%')
            " Numbers of listed buffers which are not the target to be deleted.
            let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
            " Listed, not target, and not displayed.
            let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
            " Take the first buffer, if any (could be more intelligent).
            let bjump = (bhidden + blisted + [-1])[0]
            if bjump > 0
                execute 'buffer '.bjump
            else
                execute 'enew'.a:bang
            endif
        endif
    endfor
    execute 'bdelete'.a:bang.' '.btarget
    execute wcurrent.'wincmd w'
endfunction "}}}
command! -bang -complete=buffer -nargs=? Bclose call s:Bclose('<bang>', '<args>')

" Show numbering (absolute / relative)
function! ToggleRelNumbering() "{{{
    if &number
        set relativenumber
    else
        set number
    endif
endfunction "}}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FileType settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
    " Makefile
    autocmd FileType make setl noexpandtab

    " C / C++
    "autocmd BufNewFile,BufRead,BufEnter *.c setl filetype=c
    "autocmd BufNewFile,BufRead,BufEnter *.h,*.cpp,*.hpp setl filetype=cpp

    " JSON / JavaScript
    autocmd BufNewFile,BufRead *.json set filetype=javascript

    " Pascal
    autocmd BufNewFile,BufRead *.pas,*.PAS set filetype=pascal

    " Markdown
    autocmd BufNewFile,BufRead *.md set filetype=markdown

    " Python
    autocmd BufWritePre *.py :%s/\s\+$//e
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagList
let Tlist_Enable_Fold_Column = 0
let Tlist_Compact_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Use_Right_Window = 1
nmap <F4> :Tlist<cr>
imap <F4> <C-o><F4>

" NerdTree
map <silent> <F3> :NERDTreeToggle<cr>
imap <silent> <F3> <C-o><F3><cr>

" Fugitive
nmap <leader>gs :Gstatus<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gw :Gwrite<cr>

" Gist
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1

" FuzzyFinder
let g:fuf_modesDisable = []
let g:fuf_mrufile_maxItem = 400
let g:fuf_mrucmd_maxItem = 400
nnoremap <silent> sj     :FufBuffer<cr>
nnoremap <silent> sk     :FufFileWithCurrentBufferDir<cr>
nnoremap <silent> sK     :FufFileWithFullCwd<cr>
nnoremap <silent> s<C-k> :FufFile<cr>
nnoremap <silent> sl     :FufCoverageFileChange<cr>
nnoremap <silent> sL     :FufCoverageFileChange<cr>
nnoremap <silent> s<C-l> :FufCoverageFileRegister<cr>
nnoremap <silent> sd     :FufDirWithCurrentBufferDir<cr>
nnoremap <silent> sD     :FufDirWithFullCwd<cr>
nnoremap <silent> s<C-d> :FufDir<cr>
nnoremap <silent> sn     :FufMruFile<cr>
nnoremap <silent> sN     :FufMruFileInCwd<cr>
nnoremap <silent> sm     :FufMruCmd<cr>
nnoremap <silent> su     :FufBookmarkFile<cr>
nnoremap <silent> s<C-u> :FufBookmarkFileAdd<cr>
vnoremap <silent> s<C-u> :FufBookmarkFileAddAsSelectedText<cr>
nnoremap <silent> si     :FufBookmarkDir<cr>
nnoremap <silent> s<C-i> :FufBookmarkDirAdd<cr>
nnoremap <silent> st     :FufTag<cr>
nnoremap <silent> sT     :FufTag!<cr>
nnoremap <silent> s<C-]> :FufTagWithCursorWord!<cr>
nnoremap <silent> s,     :FufBufferTag<cr>
nnoremap <silent> s<     :FufBufferTag!<cr>
vnoremap <silent> s,     :FufBufferTagWithSelectedText!<cr>
vnoremap <silent> s<     :FufBufferTagWithSelectedText<cr>
nnoremap <silent> s}     :FufBufferTagWithCursorWord!<cr>
nnoremap <silent> s.     :FufBufferTagAll<cr>
nnoremap <silent> s>     :FufBufferTagAll!<cr>
vnoremap <silent> s.     :FufBufferTagAllWithSelectedText!<cr>
vnoremap <silent> s>     :FufBufferTagAllWithSelectedText<cr>
nnoremap <silent> s]     :FufBufferTagAllWithCursorWord!<cr>
nnoremap <silent> sg     :FufTaggedFile<cr>
nnoremap <silent> sG     :FufTaggedFile!<cr>
nnoremap <silent> so     :FufJumpList<cr>
nnoremap <silent> sp     :FufChangeList<cr>
nnoremap <silent> sq     :FufQuickfix<cr>
nnoremap <silent> sy     :FufLine<cr>
nnoremap <silent> sh     :FufHelp<cr>
nnoremap <silent> se     :FufEditDataFile<cr>
nnoremap <silent> sr     :FufRenewCache<cr>
nnoremap <silent> ss     :FufFile **/<cr>
nnoremap s <nop>

cd

