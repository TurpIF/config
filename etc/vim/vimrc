""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sections:
"     General
"     VIM user interface
"     Syntax
"     Colors and fonts
"     Files and backups
"     Text, buffers, tab and indent related
"     Editing mappings
"     Plugins customization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader map
let mapleader = ","

" Use the plugin pathogen to include other plugins
call pathogen#infect()
call pathogen#helptags()

" Size of the history
set history=700

" Read again the current file if it has been edited from outside
set autoread

" Enable filetype
filetype plugin on
filetype indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shorten some message of vim
set shortmess=aTWI

" Always show the status line
set laststatus=2

" Do not show the used mode (for powerline)
set noshowmode

" Title is the name of the current file
set title

" Buffer become hidden when abandoned
set hidden

" Set 13 lines to the cursor - when moving vertically using j/k
" 13 for the luck
set scrolloff=13

" Active the wild menu
set wildmenu

" Use <TAB> to show the wildmenu
set wildchar=<TAB>

" Set the mode of the completion
set wildmode=list:longest

" Ignore compiled files
set wildignore=*.o,*.pyc,*~

" Always show current position
set ruler

" Show line number
set number

" Height of the command line
set cmdheight=1

" Specifies backspace
set backspace=eol,start,indent

" Add wrapping in normal and visual mode
set whichwrap+=<,>,l,h

" Don't redraw while executing macros
set lazyredraw

" Disable mouse
set mouse=
set mousehide

" Fix for terminal enabling ALT key mappings
if !has("gui_running")
    let s:c = "a"
    while s:c <= "z"
        execute "set <A-" . s:c . ">=\e" . s:c
        execute "imap \e" . s:c . " <A-" . s:c . ">"
        let s:c = nr2char(1 + char2nr(s:c))
    endwhile
    set timeout ttimeoutlen=50
endif

" Enable magic for regular exp
set magic

" Ignore case when searching
set ignorecase

" Try to be smart about cases when searching
set smartcase

" Higlight search result
set hlsearch

" When search is canceled, return to the old position
set incsearch

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax detection
syntax enable

" Show matching brackets
set showmatch
set matchtime=2

" Tags (go up directories and collect "tags" files)
set tags=./tags;/

" Default complete function
set omnifunc=syntaxcomplete#Complete

" Set style of the completion
set completeopt=menu,longest

" Expand path with local files
set path+=/usr/local/include

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set the background
set background=dark

" 256 colors term
set t_Co=256

" Colorscheme
let g:solarized_termcolors=256
colorscheme solarized

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files and backups
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove backup files
set nobackup
set nowritebackup

" Do not use swap file
set noswapfile

" Use UTF-8 charset
set encoding=utf-8

" Choose the good file encoding
set fileencodings=ucs-bom,utf-8,default,latin1

" Choose the good file format
set fileformats=unix,dos

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, buffers, tab and related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indentation option
set autoindent
set smartindent
set shiftwidth=4

" Tabulation option
set expandtab
set smarttab
set softtabstop=4
set tabstop=8

" Replace indentation, eol and other non visible char
set list listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮,eol:¤
set showbreak=↪

" Virtual edit
" set virtualedit=all

" Line break on 100 characters
" set linebreak
" set textwidth=100

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable arrows key
nnoremap <up>    <nop>
nnoremap <down>  <nop>
nnoremap <left>  <nop>
nnoremap <right> <nop>

" Shortcut to save
nnoremap <leader>w :write<cr>

" Close current file
nmap <leader>q :quit<cr>

" Run ls in shell
nmap <leader>ls :!ls<cr>

" Edit/Source vimrc
nmap <leader>co :edit $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Switch CWD to the directory of the current buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Disable highlight
nmap <leader><cr> :set nohlsearch<cr>

" Quick search and replace
nnoremap <leader>s :%s/\v<<C-r><C-w>>//gI<left><left><left>
" TODO enable this in visual mode

" Transform Y to y$
nmap Y y$

" Indentation with visual mode keep the selection
vmap > >gv
vmap < <gv

" Move rapidly between opened windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remap vim 0 to first non-blank char
nmap 0 ^

" Quick indenting
nmap <tab> ==

" Quick make command
nmap <leader>m :make<cr>

" Exchange ' `
nnoremap ' `
nnoremap ` '

" Move a line of text using Alt+[jk]
nnoremap <M-j> mz:move .+1<cr>`z
nnoremap <M-k> mz:move .-2<cr>`z
inoremap <M-j> <esc>:move .+1<cr>gi
inoremap <M-k> <esc>:move .-2<cr>gi
vnoremap <M-j> :move '>+1<cr>gvgv
vnoremap <M-k> :move '<-2<cr>gvgv

" Stay at the same position when using = in visual mode
vnoremap = =gv<esc>

" Close current buffer
nmap <leader>bd :bdelete<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins customization
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FuzzyFinder
let g:fuf_modesDisable = []
let g:fuf_mrufile_maxItem = 400
let g:fuf_mrucmd_maxItem = 400
nnoremap <silent> sj     :FufBuffer<CR>
nnoremap <silent> sk     :FufFileWithCurrentBufferDir<CR>
nnoremap <silent> sK     :FufFileWithFullCwd<CR>
nnoremap <silent> s<C-k> :FufFile<CR>
nnoremap <silent> sl     :FufCoverageFileChange<CR>
nnoremap <silent> sL     :FufCoverageFileChange<CR>
nnoremap <silent> s<C-l> :FufCoverageFileRegister<CR>
nnoremap <silent> sd     :FufDirWithCurrentBufferDir<CR>
nnoremap <silent> sD     :FufDirWithFullCwd<CR>
nnoremap <silent> s<C-d> :FufDir<CR>
nnoremap <silent> sn     :FufMruFile<CR>
nnoremap <silent> sN     :FufMruFileInCwd<CR>
nnoremap <silent> sm     :FufMruCmd<CR>
nnoremap <silent> su     :FufBookmarkFile<CR>
nnoremap <silent> s<C-u> :FufBookmarkFileAdd<CR>
vnoremap <silent> s<C-u> :FufBookmarkFileAddAsSelectedText<CR>
nnoremap <silent> si     :FufBookmarkDir<CR>
nnoremap <silent> s<C-i> :FufBookmarkDirAdd<CR>
nnoremap <silent> st     :FufTag<CR>
nnoremap <silent> sT     :FufTag!<CR>
nnoremap <silent> s<C-]> :FufTagWithCursorWord!<CR>
nnoremap <silent> s,     :FufBufferTag<CR>
nnoremap <silent> s<     :FufBufferTag!<CR>
vnoremap <silent> s,     :FufBufferTagWithSelectedText!<CR>
vnoremap <silent> s<     :FufBufferTagWithSelectedText<CR>
nnoremap <silent> s}     :FufBufferTagWithCursorWord!<CR>
nnoremap <silent> s.     :FufBufferTagAll<CR>
nnoremap <silent> s>     :FufBufferTagAll!<CR>
vnoremap <silent> s.     :FufBufferTagAllWithSelectedText!<CR>
vnoremap <silent> s>     :FufBufferTagAllWithSelectedText<CR>
nnoremap <silent> s]     :FufBufferTagAllWithCursorWord!<CR>
nnoremap <silent> sg     :FufTaggedFile<CR>
nnoremap <silent> sG     :FufTaggedFile!<CR>
nnoremap <silent> so     :FufJumpList<CR>
nnoremap <silent> sp     :FufChangeList<CR>
nnoremap <silent> sq     :FufQuickfix<CR>
nnoremap <silent> sy     :FufLine<CR>
nnoremap <silent> sh     :FufHelp<CR>
nnoremap <silent> se     :FufEditDataFile<CR>
nnoremap <silent> sr     :FufRenewCache<CR>

" YouCompleteMe
" Jump to the definition
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<cr>
"
"" In case there is no file .ycm_extra_conf
"let g:ycm_global_ycm_extra_conf = ''
"
"" Do not ask anymore if we want to use the ycm_extra_conf file
"let g:ycm_confirm_extra_conf = 0
"
"" Use <C-Space> to invoke completion
"let g:ycm_key_invoke_completion = '<C-space>'
"
"" Keys use to select the completion
"let g:ycm_key_list_select_completion = ['<tab>', '<down>', '<enter>']
"
"" Keys use to get previous completion
"let g:ycm_key_list_previous_completion = ['<S-tab>', '<up>']
"
"" Use tags to help the completion
"let g:ycm_collect_identifiers_from_tags_files = 1
"
"" Do not collect label from comments
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"
"" Let YCM change the updatetime
"let g:ycm_allow_changing_updatetime = 1
"
"" File formats black list
"let g:ycm_filetype_blacklist = {
"            \ 'notes' : 1,
"            \ 'markdown' : 1,
"            \ 'text' : 1,
"            \}
"
"" Minimal size of a word before YCM try to complete it
"let g:ycm_min_num_of_chars_for_completion = 2

"" clang_complete
"" Set the auto selection
"let g:clang_auto_select = 0
"
"" Automatically complete after ->, ., ::
"let g:clang_complete_auto = 0
"
"" Show error in quickfix window
"let g:clang_cimplete_copen = 1
"
"" Higlight the warnings and errors
"let g:clang_hl_errors = 1
"
"" Pariodically update the quickfix window (better to use
"" g:ClangUpdateQuickFix())
"let g:clang_periodic_quicfix = 0
"
"" Use some snippets magic
"let g:clang_snippets = 1
"
"" Snippets engine
"let g:clang_snippets_engine = "clang_complete"
"
"" Close the preview window after a completion
"let g:clang_close_preview = 0
"
"" Use some default option (can be change locally with a .clang_complete file)
"let g:clang_user_options = '-std=c++11'
"
"" Use libclang instead of clang/clang++
"let g:clang_use_library = 0
"
"" Sort of results (alpha, priority, none)
"let g:clang_sort_algo = "priority"
"
"" Key used to jump to declaration
"let g:clang_jumpto_declaration_key = "<C-d>"
