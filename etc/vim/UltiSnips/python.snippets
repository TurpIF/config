global !p
import re
reg_args = re.compile(r'\*{0,2}\s*([a-zA-Z_][a-zA-z0-9_]*)(\s*=(.+))?')
reg_return = re.compile(r'return\s+.+')
reg_raise = re.compile(r'raise\s+.+')

def args2list(args):
  res = []
  for a in args.split(','):
    m = reg_args.match(a.strip())
    if m:
      name = m.group(1).strip()
      default = m.group(3)
      if default:
        default = default.strip()
      res.append((name, default))
  return res

def args2doc(args, exclude=['self']):
  ls = args2list(args)
  if not ls:
    return ''

  line = []
  f = "%s%s -- TODO"
  f_def = f + " (default %s)"
  max_name_length = max(map(lambda x: len(x[0]) if x[0] not in exclude else 0, ls))
  for name, default in ls:
    if name in exclude:
      continue
    sep = (max_name_length - len(name)) * ' '
    if default is not None:
      line.append(f_def % (name, sep, default))
    else:
      line.append(f % (name, sep))
  return '\n'.join(map(snip.mkline, line))
endglobal

snippet #!
#!/usr/bin/env python
# -*- coding: utf-8 -*-
${0}
endsnippet

snippet imp
import ${1:module}
${0}
endsnippet

snippet from
from ${1:package} import ${2:module}
${0}
endsnippet

snippet while
while ${1:condition}:
    ${0:pass}
endsnippet

snippet with
with ${1:expr} as ${2:var}:
    ${0:pass}
endsnippet

snippet for
for ${1:item} in ${2:items}:
    ${0:pass}
endsnippet

snippet if
if ${1:cond}:
    ${0:pass}
endsnippet

snippet else
else:
    ${0:pass}
endsnippet

snippet elif
elif ${1:cond}:
    ${0:pass}
endsnippet

snippet def
def ${1:fname}(${2:args}):
    """
    ${3:Description of $1}`!p
snip >> 1
doc = args2doc(t[2])
if doc:
  snip.rv = '\n\n' + snip.mkline('Arguments:') + '\n' + doc`

    Returns:
    ${4:Nothing}

    Raises:
    ${5:Nothing}
    """
    ${6:pass}

endsnippet

snippet defm
def ${1:fname}(self, ${2:args}):
    """
    ${3:\brief $1}

    ${4:Detailed}

`!p snip.rv = '\n'.join([snip.mkline('    \\args ' + a.strip() + ': TODO') for a in t[2].split(',') if a.strip() != 'self'])`
`!p snip.rv = ('\n' + snip.mkline('    \\return ' + t[5] + ': TODO')) if t[5] else '    \\return None'`
    """
    ${0}
endsnippet

snippet class
class ${1:classname}(${2:object}):
    """
    ${3:\brief $1}

    ${4:Detailed}
    """
    def __init__(self, ${5:args}):
        ${6:super($1, self).__init__()}
`!p snip.rv = '\n'.join([snip.mkline('        self.' + a.strip() + ' = ' + a.strip()) for a in t[5].split(',') if a.strip() != 'self'])`
        ${0:pass}
endsnippet

snippet .
self.
endsnippet

snippet ldv
${1:var} = lambda ${2:v_in}: ${0:body}
endsnippet

snippet ld
lambda ${1:v_in}: ${0:body}
endsnippet

snippet main
if __name__ == '__main__':
    ${0:pass}
endsnippet

snippet _
__${1:init}__
endsnippet

snippet try
try:
    ${0:pass}
except ${1:Exception} as ${2:e}:
    ${3:logging.exception($2)}
    ${4:raise $2}
endsnippet

snippet ilog
import logging
${0}
endsnippet

snippet loge
logging.exception(${0:e})
endsnippet
